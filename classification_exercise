#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: athenamustakis
Predict Disease Status from Gene Expression 
Classify samples as obsese vs non-obsese based on gene expression data
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Load gene expression data (samples x genes)
X = pd.read_csv("/Users/athenamustakis/Desktop/expression_data.csv", index_col=0)

# Load labels (e.g., obese vs non-obese)
y = pd.read_csv("/Users/athenamustakis/Desktop/labels.csv", index_col=0).values.ravel()

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# Train classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Predict
y_pred = clf.predict(X_test)

# Evaluation
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
            xticklabels=["Non-Obese", "Obese"],
            yticklabels=["Non-Obese", "Obese"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.tight_layout()
plt.show()

# Feature importances
importances = pd.Series(clf.feature_importances_, index=X.columns)
top_features = importances.sort_values(ascending=False).head(20)

# Plot top features
plt.figure(figsize=(10, 6))
top_features.plot(kind='barh')
plt.xlabel("Feature Importance")
plt.title("Top 20 Most Informative Genes")
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()
